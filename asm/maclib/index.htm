<!doctype html><html lang='en'><head>
<meta http-equiv='Content-Type' content='text/html; charset=utf-8'/>
<meta name='viewport' content='width=device-width, initial-scale=1.0, maximum-scale=2.0, user-scalable=yes'>
<meta name='robots' content='ALL,FOLLOW'/>
<meta name='description' content='index.htm macro library'/>
<meta name='version' content='20250318'/>
<meta name='author' content='Pavel vitsoft Šrubař'/>
<link rel='stylesheet' href='../euroasm.css' type='text/css'/>
<link rel='shortcut icon' href='../favicon.ico'/>
<title>index.htm macro library</title>
</head>
<body class='MACLIB' id='top'><div class='HEADMENU'><table>
<tr><td rowspan='2' title='&euro;ASM - assembler and linker'><img src='../favicon.ico' alt='EuroAssembler' />
<td><a href='../index.htm' title='Alphabetical index of all &euro;ASM elements, directives and instructions'>Index</a></td>
<td><a href='../eadoc/' class='EADOC' title='Documentation of EuroAssembler'>Manual</a></td>
<td><a href='https://euroassembler.eu/download/' title='History &amp; download of the latest and previous versions'>Download</a></td>
<td><a href='../easource/' class='EASOURCE' title='Source files of EuroAssembler itself'>Source</a></td>
<td><a href='../maclib/' class='MACLIB' title='Macro libraries shipped with &euro;ASM'>Macros</a></td>
<td rowspan='2' title='Find the searched token in any text file on this site'>
<form method='post' action='../search.php' enctype='multipart/form-data' accept-charset='utf-8'>
<input type='text' id='q' placeholder='Searched word(s)' name='q' value=''/>
<br/><label title='Check the box to find the expression even if it is surrounded by other letters | digits.'>
<input type='checkbox' name='EW'/><small>Embedded word</small></label>
<br/><label title='Check the box for case-insensitive search.'>
<input type='checkbox' name='CI'/><small>Case ins.</small></label>
<input type='submit' title='Search for the specified word|expression in all site files.' name='find' value='Search'/>
</form></td></tr><tr>
<td><a href='../sitemap.htm' title='List of directories and files on this site'>Sitemap</a></td>
<td><a href='../eadoc/links.htm' class='EADOC' title='References and external links to resources used in EuroAssembler developement'>Links</a></td>
<td><a href='https://euroassembler.eu/forum/' title='Discussion forum concerning EuroAssembler'>Forum</a></td>
<td><a href='../eatests/' class='EATESTS' title='Program snippets for testing the function of &euro;ASM'>Tests</a></td>
<td><a href='../objlib/' class='OBJLIB' title='Skeletons and sample objects and projects shipped with &euro;ASM'>Projects</a></td>
</tr></table></div>
<!--Contents above the marker {!==/HEADMENU==} was generated by "generate.php".-->
<!--/HEADMENU-->
<h1>Macrolibraries
<br/><a href="#top">All macrolibraries</a>
<br/><a href="#ApiMaclibs">OS API libraries</a>
<br/><a href="#CallMaclibs">Calling convention</a>
<br/><a href="#FileMaclibs">File functions</a></h1>
<p>This is an overview of libraries which can be included to source files of programs written in EuroAssembler.</p>
<p>Names of all macroinstructions from all macrolibraries are listed in alphabetical order on the main
<a class="EXT" href="../index.htm">EuroAssembler index page</a>.</p>
<blockquote>Although macrolibraries in this directory <q>maclib</q> are licensed for
<em>public domain</em>, it's not recommendable to add your own macros, structures, constants to those files,
<!---->because your update would have been lost whenever a new version of EuroAssembler overwrites them.
<br/>Create a new macrolibrary with unoccupied name instead.</blockquote>
<!--MACLIB-->
<!--Contents between markers {!==MACLIB==} and {!==/MACLIB==} was generated by "generate.php".-->
<table><caption>Includable libraries shipped with EuroAssembler</caption>
<tr><th>Realm</th><th>OS</th><th>Width</th><th>Contents</th><th>Maclib file</th></tr>
<tr><td>EUROASM</td><td>any</td><td>16</td><td>BIOS API interface</td><td><a class='EXT' href='../maclib/biosapi.htm'>biosapi.htm</a></td></tr>
<tr><td>PROGRAM</td><td>any</td><td>16</td><td>BIOS structures + symbols.</td><td><a class='EXT' href='../maclib/bioss.htm'>bioss.htm</a></td></tr>
<tr><td>EUROASM</td><td>any</td><td>any</td><td>Extensions of CPU machine instructions</td><td><a class='EXT' href='../maclib/cpuext.htm'>cpuext.htm</a></td></tr>
<tr><td>EUROASM</td><td>any</td><td>16</td><td>Extensions of CPU machine instructions</td><td><a class='EXT' href='../maclib/cpuext16.htm'>cpuext16.htm</a></td></tr>
<tr><td>EUROASM</td><td>any</td><td>32</td><td>Extensions of CPU machine instructions</td><td><a class='EXT' href='../maclib/cpuext32.htm'>cpuext32.htm</a></td></tr>
<tr><td>EUROASM</td><td>any</td><td>64</td><td>Extensions of CPU machine instructions</td><td><a class='EXT' href='../maclib/cpuext64.htm'>cpuext64.htm</a></td></tr>
<tr><td>EUROASM</td><td>any</td><td>any</td><td>Nontinteractive debugging</td><td><a class='EXT' href='../maclib/debug.htm'>debug.htm</a></td></tr>
<tr><td>EUROASM</td><td>Dos</td><td>16</td><td>DOS API interface</td><td><a class='EXT' href='../maclib/dosapi.htm'>dosapi.htm</a></td></tr>
<tr><td>PROGRAM</td><td>Dos</td><td>16</td><td>DOS structures and symbols.</td><td><a class='EXT' href='../maclib/doss.htm'>doss.htm</a></td></tr>
<tr><td>EUROASM</td><td>Win</td><td>64</td><td>FastCall Windows 64bit calling-convention macros.</td><td><a class='EXT' href='../maclib/fastcall.htm'>fastcall.htm</a></td></tr>
<tr><td>EUROASM</td><td>Lin</td><td>64</td><td>Linux 64bit SYSCALL ABI interface.</td><td><a class='EXT' href='../maclib/linabi.htm'>linabi.htm</a></td></tr>
<tr><td>EUROASM</td><td>Lin</td><td>32</td><td>Linux 32bit INT 0x80 API interface.</td><td><a class='EXT' href='../maclib/linapi.htm'>linapi.htm</a></td></tr>
<tr><td>PROGRAM</td><td>Lin</td><td>32</td><td>Wrappers of 32bit Linux file functions.</td><td><a class='EXT' href='../maclib/linf32.htm'>linf32.htm</a></td></tr>
<tr><td>PROGRAM</td><td>Lin</td><td>64</td><td>Wrappers of 64bit Linux file functions.</td><td><a class='EXT' href='../maclib/linf64.htm'>linf64.htm</a></td></tr>
<tr><td>PROGRAM</td><td>Lin</td><td>32,64</td><td>Struc+symbols for base functions in Linux.</td><td><a class='EXT' href='../maclib/lins.htm'>lins.htm</a></td></tr>
<tr><td>PROGRAM</td><td>Lin</td><td>32,64</td><td>Struc+symbols for file access in LinAPI.</td><td><a class='EXT' href='../maclib/linsfile.htm'>linsfile.htm</a></td></tr>
<tr><td>EUROASM</td><td>any</td><td>32</td><td>Memory management macros.</td><td><a class='EXT' href='../maclib/memory32.htm'>memory32.htm</a></td></tr>
<tr><td>EUROASM</td><td>any</td><td>64</td><td>Memory management macros.</td><td><a class='EXT' href='../maclib/memory64.htm'>memory64.htm</a></td></tr>
<tr><td>EUROASM</td><td>any</td><td>16</td><td>Data sorting.</td><td><a class='EXT' href='../maclib/sort16.htm'>sort16.htm</a></td></tr>
<tr><td>EUROASM</td><td>any</td><td>32</td><td>Data sorting.</td><td><a class='EXT' href='../maclib/sort32.htm'>sort32.htm</a></td></tr>
<tr><td>EUROASM</td><td>any</td><td>64</td><td>Data sorting.</td><td><a class='EXT' href='../maclib/sort64.htm'>sort64.htm</a></td></tr>
<tr><td>EUROASM</td><td>any</td><td>16</td><td>Boolean flag manipulation.</td><td><a class='EXT' href='../maclib/status16.htm'>status16.htm</a></td></tr>
<tr><td>EUROASM</td><td>any</td><td>32</td><td>Boolean flag manipulation.</td><td><a class='EXT' href='../maclib/status32.htm'>status32.htm</a></td></tr>
<tr><td>EUROASM</td><td>any</td><td>16</td><td>StdCall 16bit calling-convention macros.</td><td><a class='EXT' href='../maclib/stdcal16.htm'>stdcal16.htm</a></td></tr>
<tr><td>EUROASM</td><td>any</td><td>32</td><td>StdCall 32bit calling-convention macros.</td><td><a class='EXT' href='../maclib/stdcal32.htm'>stdcal32.htm</a></td></tr>
<tr><td>EUROASM</td><td>any</td><td>64</td><td>StdCall 64bit calling-convention macros.</td><td><a class='EXT' href='../maclib/stdcal64.htm'>stdcal64.htm</a></td></tr>
<tr><td>EUROASM</td><td>any</td><td>16</td><td>Operations with zero-terminated strings.</td><td><a class='EXT' href='../maclib/string16.htm'>string16.htm</a></td></tr>
<tr><td>EUROASM</td><td>any</td><td>32</td><td>Operations with zero-terminated strings.</td><td><a class='EXT' href='../maclib/string32.htm'>string32.htm</a></td></tr>
<tr><td>EUROASM</td><td>any</td><td>64</td><td>Operations with zero-terminated strings.</td><td><a class='EXT' href='../maclib/string64.htm'>string64.htm</a></td></tr>
<tr><td>EUROASM</td><td>any</td><td>64</td><td>System V 64bit calling-convention macros.</td><td><a class='EXT' href='../maclib/sysvcall.htm'>sysvcall.htm</a></td></tr>
<tr><td>EUROASM</td><td>Win</td><td>64</td><td>Macros for core 64bit MS Windows functions.</td><td><a class='EXT' href='../maclib/winabi.htm'>winabi.htm</a></td></tr>
<tr><td>EUROASM</td><td>Win</td><td>any</td><td>List of MS Windows API functions with ANSI+WIDE variants.</td><td><a class='EXT' href='../maclib/winansi.htm'>winansi.htm</a></td></tr>
<tr><td>EUROASM</td><td>Win</td><td>32</td><td>Macros for core 32bit MS Windows functions.</td><td><a class='EXT' href='../maclib/winapi.htm'>winapi.htm</a></td></tr>
<tr><td>PROGRAM</td><td>Win</td><td>32</td><td>Wrappers of 32bit MS Windows file functions.</td><td><a class='EXT' href='../maclib/winf32.htm'>winf32.htm</a></td></tr>
<tr><td>PROGRAM</td><td>Win</td><td>64</td><td>Wrappers of 64bit MS Windows file functions.</td><td><a class='EXT' href='../maclib/winf64.htm'>winf64.htm</a></td></tr>
<tr><td>PROGRAM</td><td>Win</td><td>32,64</td><td>Struc+symbols for base functions in WinAPI.</td><td><a class='EXT' href='../maclib/wins.htm'>wins.htm</a></td></tr>
<tr><td>PROGRAM</td><td>Win</td><td>32,64</td><td>Struc+symbols for console subsystem in WinAPI.</td><td><a class='EXT' href='../maclib/winscon.htm'>winscon.htm</a></td></tr>
<tr><td>PROGRAM</td><td>Win</td><td>32,64</td><td>Struc+symbols for common dialogs in WinAPI.</td><td><a class='EXT' href='../maclib/winsdlg.htm'>winsdlg.htm</a></td></tr>
<tr><td>PROGRAM</td><td>Win</td><td>32,64</td><td>Struc+symbols for file access in WinAPI.</td><td><a class='EXT' href='../maclib/winsfile.htm'>winsfile.htm</a></td></tr>
<tr><td>PROGRAM</td><td>Win</td><td>32,64</td><td>Struc+symbols for graphic subsystem in WinAPI.</td><td><a class='EXT' href='../maclib/winsgui.htm'>winsgui.htm</a></td></tr>
<tr><td>PROGRAM</td><td>Win</td><td>32,64</td><td>Struc+symbols for networking in WinAPI.</td><td><a class='EXT' href='../maclib/winsnet.htm'>winsnet.htm</a></td></tr>
<tr><td>PROGRAM</td><td>Win</td><td>32,64</td><td>Struc+symbols for printing in WinAPI.</td><td><a class='EXT' href='../maclib/winsprn.htm'>winsprn.htm</a></td></tr>
<tr><td>PROGRAM</td><td>Win</td><td>32,64</td><td>Struc+symbols for registry access in WinAPI.</td><td><a class='EXT' href='../maclib/winsreg.htm'>winsreg.htm</a></td></tr>
<tr><td>PROGRAM</td><td>Win</td><td>32,64</td><td>Struc+symbols for security management in WinAPI.</td><td><a class='EXT' href='../maclib/winssec.htm'>winssec.htm</a></td></tr>
<tr><td>PROGRAM</td><td>Win</td><td>32,64</td><td>Struc+symbols for time functions in WinAPI.</td><td><a class='EXT' href='../maclib/winstime.htm'>winstime.htm</a></td></tr>
</table>
<!--/MACLIB-->
<p>The <strong>Realm</strong> category specifies visibility of included library members in the source.</p>
<p>Realm <dfn>EUROASM</dfn> libraries contain only macros and preprocessing %variables, i.e. redefinable resources
<!---->which are not constrained by PROGRAM..ENDPROGRAM. Their scope begins at the moment of library inclusion,
<!---->and it ends at the end of source file.
<br/>Macrolibraries from this realm may be included inside the PROGRAM block,
<!---->or only once at the beginning of source file.</p>
<blockquote>If an EUROASM macrolibrary depends on %variables and macros defined in other library,
<!---->it should ensure from misorder and start with <code>INCLUDE1 OtherLibrary</code>.</blockquote>
<p>Realm <dfn>PROGRAM</dfn> libraries contain definitions of constant symbols and structures, which must be unique in a program.
<br/>Libraries from this realm should be included inside the PROGRAM block,
<!---->otherwise the symbols and structures would not be visible for the assembled program.
<br/>Order of their inclusion does not matter.</p>
<blockquote>Structures and symbols retrieved from
<a class="EXTL" href="../eadoc/links.htm#WindowsSDK">[WindowsSDK]
</a> &nbsp; were classified by their subsystem or functionality and split to several specialized macrolibraries
<q>wins*.htm</q>. This should speed up the assembly time, because ordinary programs
<!---->usually do not need to include all possible functionalities at once.
<br/>Look for the constant/structure name with the <a class="EXT" href="../search.php">Search
</a> applet on top of this page when you are not sure which macrolibrary hosts the symbol.
<br/>Lazy Windows programmer can include all those libraries at once with
<code>INCLUDEHEAD1 wins*.htm</code> in its header.</blockquote>

<h2 id="ApiMaclibs"><a href="#top">&uarr; API libraries</a></h2>
<p>This collection provides macros for interaction with the <dfn>application programming interface
</dfn> of operating system. It also defines homonymous macros for basic functions of the operating systems:
<!---->standard console input and output (<code>StdInput, StdOutput</code>), retrieving of command-line arguments (
<code>GetArgCount, GetArg</code>), retrieving of environment variables (
<code>GetEnv</code>), return from the program to OS (<code>TerminateProgram, TerminateStayResident</code>).</p>
<p>Programming interface macros represent an elegant way of interaction with operating system using only one single statement.
<!---->Otherwise we would have to push or load appropriate registers with argument values in the right order,
<!---->store caller-save registers, manually arrange stack alignment, call the imported function
<!---->and finally restore the stack.</p>


<table><caption>Overview of macrolibraries for interaction with OS<br/> via <i>Application Programming Interface</i></caption>
<tr><th>OS</th><th>Width</th><th>Macro</th><th>Method</th><th>Mode</th><th>Macrolibrary file</th></tr>
<tr><td>Bios</td><td>16</td><td><a class="EXT" href="biosapi.htm#BiosAPI">BiosAPI</a></td>
<td>INT 0x10</td><td>Robust</td><td><a class="EXT" href="biosapi.htm">biosapi.htm</a></td></tr>
<tr><td>Dos</td><td>16</td><td><a class="EXT" href="dosapi.htm#DosAPI">DosAPI</a></td>
<td>INT 0x21</td><td>Robust</td><td><a class="EXT" href="dosapi.htm">dosapi.htm</a></td></tr>
<tr><td>Lin</td><td>32</td><td><a class="EXT" href="linapi.htm#LinAPI">LinAPI</a></td>
<td>INT 0x80</td><td>Robust | Fast</td><td><a class="EXT" href="linapi.htm">linapi.htm</a></td></tr>
<tr><td>Lin</td><td>64</td><td><a class="EXT" href="linabi.htm#LinABI">LinABI</a></td>
<td>SYSCALL</td><td>Robust | Fast</td><td><a class="EXT" href="linabi.htm">linabi.htm</a></td></tr>
<tr><td>Win</td><td>32</td><td><a class="EXT" href="winapi.htm#WinAPI">WinAPI</a></td>
<td>StdCall</td><td>Robust | Fast</td><td><a class="EXT" href="winapi.htm">winapi.htm</a></td></tr>
<tr><td>Win</td><td>64</td><td><a class="EXT" href="winabi.htm#WinABI">WinABI</a></td>
<td>FastCall</td><td>Robust | Fast</td><td><a class="EXT" href="winabi.htm">winabi.htm</a></td></tr>
</table>

<h2 id="CallMaclibs"><a href="#top">&uarr; Calling convention libraries</a></h2>
<p>This set of libraries is designed to create procedures conform with usual calling conventions (macros
<code>Procedure, EndProcedure</code>). Such procedures can be invoked as an OS-function callback,
<!---->or invoked by 3rd-party programs, if the procedure is exported from a shared library.</p>
<p>Macros <code>Invoke</code> can be used to exploit procedures and functions from OS or from
<!---->3rd-party non-OS libraries. Nevertheless, for interaction with OS it's better to use a specialized
<a href="#ApiMaclibs">API</a> macroinstruction.</p>

<table><caption>Overview  of OS-independent <br/><i>calling convention</i> macrolibraries</caption>
<tr><th>OS</th><th>Width</th><th>Macro</th><th>Method</th><th>Mode</th><th>Macrolibrary file</th></tr>
<tr><td>any</td><td>16</td><td><a class="EXT" href="stdcal16.htm#Invoke">Invoke</a></td><td>StdCall</td><td>Robust</td><td><a class="EXT" href="stdcal16.htm">stdcal16.htm</a></td></tr>
<tr><td>any</td><td>32</td><td><a class="EXT" href="stdcal32.htm#Invoke">Invoke</a></td><td>StdCall</td><td>Robust</td><td><a class="EXT" href="stdcal32.htm">stdcal32.htm</a></td></tr>
<tr><td>any</td><td>64</td><td><a class="EXT" href="stdcal64.htm#Invoke">Invoke</a></td><td>StdCall</td><td>Uses</td><td><a class="EXT" href="stdcal64.htm">stdcal64.htm</a></td></tr>
<tr><td>any</td><td>64</td><td><a class="EXT" href="sysvcall.htm#Invoke">Invoke</a></td><td>System V</td><td>Uses</td><td><a class="EXT" href="sysvcall.htm">sysvcall.htm</a></td></tr>
<tr><td>any</td><td>64</td><td><a class="EXT" href="fastcall.htm#Invoke">Invoke</a></td><td>FastCall</td><td>Robust | Fast</td><td><a class="EXT" href="fastcall.htm">fastcall.htm</a></td></tr>
</table>

<p>The <strong>Mode</strong> category specifies expansion mode of the macro. Most macros from EuroAssembler libraries are
<br/><dfn>Robust</dfn> which means that they do not clobber any registers except for those which return the result.
<!---->This is suitable for programming style where important variables are kept in GPR permanently and they survive invocation
<!---->of OS API or of other library function. Robust mode macros also allow to pass function arguments in arbitrary registers.</p>
<p><dfn>Fast</dfn> mode macros do not bother with saving and restoring caller-save registers.
<!---->Programmers cannot rely on values in scratch registers to remain unchanged by OS interaction.
<!---->They also need to pay attention to not overwrite values in registers designed for argument transport.</p>
<p>Some API invokation macros allow to select Fast or Robust expansion mode with keyword operand
<code>Fastmode=</code>.</p>
<p>64bit libraries employ the macro <dfn>Uses</dfn> to explicitly specify the list of registers
<!---->which the invoked procedure should save and restore. The level of robustness then depends on Uses operands.</p>
<p>Calling convention libraries contain homonymous macroinstructions
<br/>(<code>Procedure, EndProcedure, Invoke, LocalVar, ClearLocalVar, Uses</code>). Only one such library should be
<!---->included in a program. Calling convention library can be combined with
<a href="#ApiMaclibs">API library</a>, see the
<a class="EXT" href="../objlib/">sample projects</a> for examples.</p>

<h2 id="FileMaclibs"><a href="#top">&uarr; File functions</a></h2>
<p>Homonymous macroinstructions whose name begins with <dfn>File~</dfn> were created to unify work with files
in EuroAssembler programs, regardless of OS and program width.</p>
<table><caption>Overview of macrolibraries<br/>for <i>file functions</i></caption>
<tr><th>OS</th><th>Width</th><th>Mode</th><th>Macrolibrary file</th></tr>
<tr><td>Lin</td><td>32</td><td>Robust</td><td><a class="EXT" href="linf32.htm">linf32.htm</a></td></tr>
<tr><td>Lin</td><td>64</td><td>Robust</td><td><a class="EXT" href="linf64.htm">linf64.htm</a></td></tr>
<tr><td>Win</td><td>32</td><td>Robust</td><td><a class="EXT" href="winf32.htm">winf32.htm</a></td></tr>
<tr><td>Win</td><td>64</td><td>Robust</td><td><a class="EXT" href="winf64.htm">winf64.htm</a></td></tr>
</table>
<p>As an example of using those File~ macros see the sample testing programs
<a class="EXT" href="../prolin32/tlinf32.htm">tlinf32.htm</a>,
<a class="EXT" href="../prolin64/tlinf64.htm">tlinf64.htm</a>,
<a class="EXT" href="../prowin32/twinf32.htm">twinf32.htm</a>,
<a class="EXT" href="../prowin64/twinf64.htm">twinf64.htm</a>.
</p>

<!--TAILMENU-->
<!--Contents below the marker {!==TAILMENU==} was generated by "generate.php".-->
<br class='CLEAR'/><a id='bottom' href='#top'>&#x25B2;Back to the top&#x25B2;</a>
</body></html>
